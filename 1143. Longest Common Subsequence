/* 
Runtime: 20 ms, faster than 74.78% of C++ online submissions.
Memory: 25.93 MB, less than 61.51% of C++ online submissions.
*/

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) { 
        int m = text1.length();
        int n = text2.length(); 
        
        // Create a 2D DP table
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0)); 
        
        // Fill the DP table 
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) { 
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); 
                }
            }
        }
        
        // The length of the longest common subsequence
        return dp[m][n];
    }
    
};
