/* 
Runtime: 138 ms, faster than 95.00% of C++ online submissions.
Memory: 116.97 MB, less than 66.90% of C++ online submissions.
*/

class Solution {
public:
    bool isPalindrome(ListNode* head) {
          if (!head || !head->next) return true; // A single node or empty list is a palindrome
        
        // Step 1: Find the middle of the linked list using slow and fast pointers
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        // Step 2: Reverse the second half of the list
        ListNode* prev = nullptr;
        ListNode* curr = slow;
        while (curr) {
            ListNode* nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        
        // Step 3: Compare the first half and the reversed second half
        ListNode* firstHalf = head;
        ListNode* secondHalf = prev;
        while (secondHalf) { // Only need to compare until the end of the second half
            if (firstHalf->val != secondHalf->val) {
                return false; // Not a palindrome
            }
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }
        

        return true; // The list is a palindrome
    }
    
};
