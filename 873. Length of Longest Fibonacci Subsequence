class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
    unordered_map<int, int> index;  
    unordered_map<int, int> dp;     
    int max_len = 0;
    int n = arr.size();

    for (int i = 0; i < n; ++i) {
        index[arr[i]] = i;
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            int k = arr[i] - arr[j];  // Find the potential third element in the Fibonacci sequence
            if (index.count(k) && index[k] < j) {
                int key = j * n + i;  
                int prevKey = index[k] * n + j;
                dp[key] = dp.count(prevKey) ? dp[prevKey] + 1 : 3; 
                max_len = max(max_len, dp[key]);
            }
        }
    }

    return max_len >= 3 ? max_len : 0;  
}
};
